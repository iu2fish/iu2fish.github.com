<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>生活的日常</title>
    <description></description>
    <link>https://xqian.net//</link>
    <atom:link href="https://xqian.net//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 09 Feb 2021 16:46:26 +0800</pubDate>
    <lastBuildDate>Tue, 09 Feb 2021 16:46:26 +0800</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>2021年1月最后一周的记录</title>
        <description>&lt;h1 id=&quot;2021-01-25-111533-am&quot;&gt;2021-01-25 11:15:33 AM&lt;/h1&gt;

&lt;p&gt;事实上&lt;/p&gt;

&lt;h1 id=&quot;2021-01-25-144615-pm&quot;&gt;2021-01-25 14:46:15 PM&lt;/h1&gt;

&lt;p&gt;老婆说，删了饿了么美团app，要自己做饭吃，不知道能坚持多久。&lt;/p&gt;

&lt;h1 id=&quot;2021-01-26-142901-pm&quot;&gt;2021-01-26 14:29:01 PM&lt;/h1&gt;

&lt;p&gt;折腾了一番，希望这次审核通过吧&lt;/p&gt;
&lt;h4 id=&quot;落户上海&quot;&gt;落户上海&lt;/h4&gt;

&lt;h1 id=&quot;2021-01-27-132036-pm&quot;&gt;2021-01-27 13:20:36 PM&lt;/h1&gt;

&lt;p&gt;上海派出所好严格啊，同事的堂哥，在地铁和别人发生肢体冲突，被判为互殴，对方不和解，结果被拘留10天，对方拘留3天&lt;/p&gt;

&lt;h1 id=&quot;2021-01-28-095901-am&quot;&gt;2021-01-28 09:59:01 AM&lt;/h1&gt;

&lt;p&gt;今天我生日呀🎂&lt;/p&gt;

&lt;h1 id=&quot;2021-01-28-101238-am&quot;&gt;2021-01-28 10:12:38 AM&lt;/h1&gt;

&lt;p&gt;红色景点，搞的鸡飞狗跳。就因为红色景点要用严肃的词，不能用游玩，要用参观，呵呵&lt;/p&gt;

&lt;h1 id=&quot;2021-01-29-104946-am&quot;&gt;2021-01-29 10:49:46 AM&lt;/h1&gt;

&lt;p&gt;落户上海，预审核了，期待ing&lt;/p&gt;

&lt;h1 id=&quot;2021-01-29-194510-pm&quot;&gt;2021-01-29 19:45:10 PM&lt;/h1&gt;

&lt;p&gt;没有中奖，不开心。&lt;/p&gt;

&lt;h1 id=&quot;2021-01-31-194510-pm&quot;&gt;2021-01-31 19:45:10 PM&lt;/h1&gt;

&lt;p&gt;老婆要去出去约会，生气。&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Feb 2021 09:00:00 +0800</pubDate>
        <link>https://xqian.net//2021/02/01/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/</link>
        <guid isPermaLink="true">https://xqian.net//2021/02/01/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/</guid>
        
        
      </item>
    
      <item>
        <title>2021-01-18~2021-01-25的记录</title>
        <description>&lt;h3 id=&quot;2021-01-18-104225-am&quot;&gt;2021-01-18 10:42:25 AM&lt;/h3&gt;

&lt;p&gt;生孩子，这是一个生命工程，绝不亚于设计一个高并发分布式系统，并且这个系统没有测试环境，直接在生产环境操作，无法模拟无法复现，没有API，开始设计之前，最好是解决掉耦合的问题。&lt;/p&gt;

&lt;h3 id=&quot;2021-01-19-093122-am&quot;&gt;2021-01-19 09:31:22 AM&lt;/h3&gt;

&lt;p&gt;郑爽的瓜，太大了，吃不完&lt;/p&gt;

&lt;h3 id=&quot;2021-01-19-132445-pm&quot;&gt;2021-01-19 13:24:45 PM&lt;/h3&gt;

&lt;p&gt;老婆说我做事没边界。我要哭了&lt;/p&gt;

&lt;h3 id=&quot;2021-01-19-132756-pm&quot;&gt;2021-01-19 13:27:56 PM&lt;/h3&gt;

&lt;p&gt;要哭了&lt;/p&gt;

&lt;h3 id=&quot;2021-01-19-132842-pm&quot;&gt;2021-01-19 13:28:42 PM&lt;/h3&gt;

&lt;p&gt;老婆发给我一个取卵的微博，看的我极度不适。&lt;/p&gt;

&lt;h3 id=&quot;2021-01-19-190609-pm&quot;&gt;2021-01-19 19:06:09 PM&lt;/h3&gt;

&lt;p&gt;领导告诉我，年终绩效B+，基数为2.开心呢&lt;/p&gt;

&lt;h3 id=&quot;2021-01-19-190714-pm&quot;&gt;2021-01-19 19:07:14 PM&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;media/16110198820218/16110544268765.jpg&quot; alt=&quot;-w432&quot; /&gt;
老婆的笑点&lt;/p&gt;

&lt;h3 id=&quot;2021-01-20-101500-am&quot;&gt;2021-01-20 10:15:00 AM&lt;/h3&gt;

&lt;p&gt;今天腊八节了，快过年了，不知道能不能回老家过年&lt;/p&gt;

&lt;h3 id=&quot;2021-01-21-094612-am&quot;&gt;2021-01-21 09:46:12 AM&lt;/h3&gt;

&lt;p&gt;上海好像发现了2例疑似病例，感觉我回不去老家过年了。&lt;/p&gt;

&lt;h3 id=&quot;2021-01-21-142040-pm&quot;&gt;2021-01-21 14:20:40 PM&lt;/h3&gt;

&lt;p&gt;完了，上海确认3例，真的回不去了。&lt;/p&gt;

&lt;h3 id=&quot;2021-01-21-192715-pm&quot;&gt;2021-01-21 19:27:15 PM&lt;/h3&gt;

&lt;p&gt;今天是21世纪第21年的第21天&lt;/p&gt;

&lt;h3 id=&quot;2021-01-22-153718-pm&quot;&gt;2021-01-22 15:37:18 PM&lt;/h3&gt;

&lt;p&gt;今年真的是回不去了&lt;/p&gt;

&lt;h3 id=&quot;2021-01-25-100813-am&quot;&gt;2021-01-25 10:08:13 AM&lt;/h3&gt;

&lt;p&gt;昨天突发奇想，买了个xqian.net的域名，作为blog的域名吧，记录一些生活的日常。&lt;/p&gt;

</description>
        <pubDate>Sun, 24 Jan 2021 15:13:29 +0800</pubDate>
        <link>https://xqian.net//2021/01/24/%E4%B8%80%E5%91%A8%E7%9A%84%E6%97%A5%E8%AE%B0/</link>
        <guid isPermaLink="true">https://xqian.net//2021/01/24/%E4%B8%80%E5%91%A8%E7%9A%84%E6%97%A5%E8%AE%B0/</guid>
        
        
      </item>
    
      <item>
        <title>我的新域名</title>
        <description>&lt;h3 id=&quot;说点啥呢&quot;&gt;说点啥呢&lt;/h3&gt;
&lt;p&gt;感觉没啥可说的，就这样吧，后面会记录我和我老婆的日常琐事吧&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jan 2021 15:13:29 +0800</pubDate>
        <link>https://xqian.net//2021/01/24/%E6%96%B0%E7%9A%84%E5%9F%9F%E5%90%8D/</link>
        <guid isPermaLink="true">https://xqian.net//2021/01/24/%E6%96%B0%E7%9A%84%E5%9F%9F%E5%90%8D/</guid>
        
        
      </item>
    
      <item>
        <title>2020年终复盘</title>
        <description>&lt;p&gt;又到了写年终总结的时候了，刚毕业那几年每年都会写，断了几年，今年发生的事情太多了，还是记录一下吧。&lt;/p&gt;
&lt;h2 id=&quot;疫情&quot;&gt;疫情&lt;/h2&gt;
&lt;p&gt;年初，疫情大规模爆发，在家看新闻，大年三十晚上是最撕裂的一天吧，电视里歌舞升平，现实呢，后来武汉解封问了从武汉回来的同事，我说，春节期间网上流传的视频是真的么？他说是真的，真相远比网上流传的视频要震撼的多的多。怕封路，在家也没呆几天就匆匆的返回上海。一路上见了很多奇奇怪怪的事，比如乡下用土堆封路，比如租售待遇不一样，同一个小区，都是从外地返回，业主可以直接进去，租赁的租户就不可以进去，奇奇怪怪的事太多了。觉得自己被冒犯，可是哪有如何呢，很多人都说自己见证了历史，可是历史不是每天都是么。&lt;/p&gt;

&lt;h2 id=&quot;生活&quot;&gt;生活&lt;/h2&gt;
&lt;p&gt;2020对我来说就是角色的转变吧。计划结婚是从5月份开始，这期间要办理户口，买房，订婚，领证，结婚。这一系列的流程真的是不可多言。大概是3.4月份的时候，女票说我们去看看房子吧，最近房价好像挺适合上车的。再加上疫情初期时候的，租售同权伤了我，听她这么一说，再加上她的一个表舅是二手房中介，就咨询了一下，对方说，房子这事如果是自住，早买早好。于是在4月份的时候，算了下手里的现金，加上把理财的钱，七七八八加起来，算了下，差不多够首付，于是开启了看房之旅。&lt;/p&gt;
&lt;h3 id=&quot;买房&quot;&gt;买房&lt;/h3&gt;
&lt;p&gt;因为限购，我又没有交社保，所以先看的都是不限购区域，女票先是看中了一套洋房，看样板房，双阳台，各种都满意，但是手里的首付不满意。所以洋房的打算就撤了，后面发现可以直接落户，这样就可以购买限购的区域，于是开始了折腾户口的事情，从开始申请户口，到后面拿到户口本，前前后后，花了差不多一个月吧。五一期间也看中了新房，交了意向金，就等着开盘了。开盘那天是5月30号，天还下着小雨，临时通知我们开盘了，我们急匆匆的赶过去，还好还好，最后选到了心仪的楼层和户型。5月31日，交了首付款。&lt;/p&gt;
&lt;h3 id=&quot;领证&quot;&gt;领证&lt;/h3&gt;
&lt;p&gt;6.1领证，也算是意外的，本来是打算12.25去领证的，因为那是在一起的纪念日，但是买房的事赶的急，就临时觉得6.1领证也蛮好的，以后可以2个节日一起过。领证那天也是蛮逗的，因为女票匆匆出门，忘了带户口本。要不是我提醒，估计我们那天就领不了证了，前几天，老婆问我，你2020哪件事印象最深？我说当然是结婚啊。她说，你猜我是哪件事？我说，你肯定是领证那天忘了带户口本。哈哈哈哈哈哈哈哈哈哈哈，她说你真聪明。&lt;/p&gt;
&lt;h3 id=&quot;定亲&quot;&gt;定亲&lt;/h3&gt;
&lt;p&gt;从6月份到7月底一直在忙碌这件事。因为是异地，定亲我家里人要过来，我老婆家也不在我工作地，所以，只能两地奔波去忙碌这件事，老婆一起搞，帮忙订酒店，饭店，确定菜单，酒水。最后也不负付出，没出啥大乱子。&lt;/p&gt;
&lt;h3 id=&quot;回老家结婚&quot;&gt;回老家结婚&lt;/h3&gt;
&lt;p&gt;十一回去结婚，这个都是我爸在弄，我和老婆就是2个工具人，也没啥事，就是十一家里好冷，哈哈，岳父母到了之后说，怎么那么冷。&lt;/p&gt;
&lt;h3 id=&quot;扬州&quot;&gt;扬州&lt;/h3&gt;
&lt;p&gt;国庆假期结束之后，返回上海的时候，发现途径扬州，于是就暂作停留，在扬州玩了2天，十年之后再次去扬州和大学时时不一样的，或许是在江南看多了，到了扬州觉得一般般，不是十年前去的那个扬州了。&lt;/p&gt;

&lt;h2 id=&quot;工作&quot;&gt;工作&lt;/h2&gt;
&lt;p&gt;这一年的工作，总体没啥大的变化，除了因为疫情，收入没有涨，其他还行，就是中间穿插了点小插曲。因为组织架构调整的原因，遇到不淑的同事，也算是无话可说，幸好及时调整，也算是及时止损吧。&lt;/p&gt;
&lt;h2 id=&quot;电池产品&quot;&gt;电池产品&lt;/h2&gt;
&lt;p&gt;今年是买苹果产品最多的一年&lt;/p&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;iPhone 12 Pro Max *2&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;iPhone 12 * 1&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Apple Watch 5 * 1&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;iPad Air 3 * 1&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;iPad Air 4 * 1&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;AirPods Pro * 1&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;Apple Pencil * 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;希望明年少买一些吧，太贵了。&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;
&lt;p&gt;要说遗憾，有很多未完成的吧，也有很多不愉快，比如因为订婚，结婚，意见的分歧，幸好最后大家统一了意见。比如婚纱照，拍了2次还是不满意，最后退款，和影楼闹的不欢而散。比如未能出去玩，2019年底的计划，但是总的来说，2020还是收获很多的。靠自己买房，结婚，我可以傲娇的说，买房我没有啃老，没有用6个钱包，都是我自己一行代码一行代码码出来的。老婆说，以后我们要做一年和五年规划。虽然2021和2020不会有大的差别，寒潮依然在，温度依然是寒冷的，但是仪式感还是要有的。&lt;/p&gt;
&lt;h2 id=&quot;2021规划&quot;&gt;2021规划&lt;/h2&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;把户口落到上海&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;学会驾照&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;买个车车&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;第一个五年计划&quot;&gt;第一个五年计划&lt;/h2&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;要个宝宝&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 31 Dec 2020 15:13:29 +0800</pubDate>
        <link>https://xqian.net//2020/12/31/new-year/</link>
        <guid isPermaLink="true">https://xqian.net//2020/12/31/new-year/</guid>
        
        
      </item>
    
      <item>
        <title>A few firendy tips for your javascript</title>
        <description>&lt;p&gt;JavaScript is a very loose programming language. By saying that I mean it’s so easy to write heaps of crap that still works, however it will be hard to maintain and to extend. In this post I’d love to present some quick and friendly tips for JavaScript beginners and it might be able to help you. Now relax and let’s get started.&lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id=&quot;know-your-target&quot;&gt;Know your target&lt;/h3&gt;
&lt;p&gt;Before you start writing any code, please spend a few minutes to figure out a simple question: which browsers will you write for?. Knowing your target (browser) can make a big difference because we all know the moderner the browser is, the more power you gain.&lt;/p&gt;

&lt;p&gt;We all know how to loop an array:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var list = [1, 2, 3];
for (var i = 0; i &amp;lt; list.length; i++) {
  var current = list[i];
  // more code omitted...
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Later on you learned the power of jQuery, and then you started to make it simpler:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var list = [1, 2, 3];
$.each(list, function(index, value) {
  // more code omitted...
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the problem is that a lot developers just don’t know that if you are targeting a browser which supports ES5, you have the full support of wrting
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array.prototype.forEach&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var list = [1, 2, 3];
list.forEach(function(element, index) {
  // more code omitted...
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And if you dig a little bit more, you should find that even IE 9 supports ES5. This may not sound over exciting, but if you check this list, you can find a lot array functions natively supported. You can gain the power of map, reduce and filter etc. This means if you are NOT writing JavaScript for old browsers, you already have much more convenience. Happy?&lt;/p&gt;

&lt;p&gt;Alright, let’s say you are still writing code for old browsers. Worry not, there’re &lt;a href=&quot;https://github.com/es-shims/es5-shim&quot;&gt;shims&lt;/a&gt; which can “trick” old browsers so that you can use ES5 functions on them.&lt;/p&gt;

&lt;p&gt;Thus, know your enemy, know your browser.&lt;/p&gt;

&lt;h3 id=&quot;be-functional&quot;&gt;Be functional&lt;/h3&gt;
&lt;p&gt;Maybe you have heard of &lt;a href=&quot;http://stackoverflow.com/questions/24279/functional-programming-and-non-functional-programming&quot;&gt;functional programming&lt;/a&gt; already. This could be extremely handy when you write JavaScript.&lt;/p&gt;

&lt;p&gt;A typical example is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array.prototype.map&lt;/code&gt;, which takes a function as input, and outputs a function in which each element is a projection of the elements from input function. Let’s have a look at the example below.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var oddNumbers = [1, 3, 5];
oddNumbers.forEach(function(x) {
  console.log(x);
}); // output 1, 3, 5
var evenNumbers = oddNumbers.map(function(x) {
    return x + 1;
  })
  .forEach(function(x) {
    console.log(x);
  }); // output 2, 4, 6

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see that we map each number &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x &lt;/code&gt;in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oddNumbers&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x + 1&lt;/code&gt; so that we got the evenNumbers.
 Functional programming style is usually written in chained methods. Check the following example.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [
  { name: 'product 1', price: 10 },
  { name: 'product 2', price: 20 },
  { name: 'product 3', price: 30 }
].filter(function(x) {
  return x.price &amp;gt; 10;
})
.map(function(x) {
  return x.price;
})
.reduce(function(x, y) {
  return x + y
}); // 50

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the code above, we first filter out products whose prices are greater than 10, then we create an array of prices on the fly, and finally we aggregate the prices to get the total price. This kind of pattern can be very powerful and flexible.&lt;/p&gt;

&lt;h3 id=&quot;lint-your-javascript&quot;&gt;Lint your JavaScript&lt;/h3&gt;

&lt;p&gt;If by now you still don’t know what lint is, you might already have produced a lot “bad code”. As I mentioned in the beginning, JavaScript (actually most dynamic script languages) is very loose, and unlike C#, Java, etc. you only see errors when it gets executed; in other words, you see runtime errors only. This could be quite annoying because some of those errors are human mistakes which are hard to detect by mortals’ eyes. JavaScript linting is a process that can help you avoid cheap errors and improve code quality, standard as well as consistency.&lt;/p&gt;

&lt;p&gt;There’re many tools that can help you with linting, but I strongly recommend &lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt;, since it supports future JavaScript standard such as ES6. You can, of course just install eslint and use it straightaway, but I challenge you to have a look at &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; or &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;, and then find a way to make your linting process automatic, which means everytime you save a file, it will be scanned by ESLint.&lt;/p&gt;

&lt;p&gt;In the meantime, I have a bonus for you. Go to have a look at the &lt;a href=&quot;http://ktei.github.io/2016/01/07/(https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb)&quot;&gt;ESLint config&lt;/a&gt; provided by Airbnb. You can follow the readme file to configure your ESLint as strict as theirs. So easy to be professional, right?&lt;/p&gt;

&lt;p&gt;Okay, these are just tips of Part 1. It shall be continued…&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;转载自：http://ktei.github.io/2016/01/07/some-general-js-tips-1.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 31 Dec 2020 15:13:29 +0800</pubDate>
        <link>https://xqian.net//2020/12/31/A-Few-Friendly-Tips-For-Your-JavaScript/</link>
        <guid isPermaLink="true">https://xqian.net//2020/12/31/A-Few-Friendly-Tips-For-Your-JavaScript/</guid>
        
        
      </item>
    
      <item>
        <title>扫码登录了解多少</title>
        <description>&lt;p&gt;周末，想写一个即刻app的微信小程序，通过web端的页面，抓取了一些接口API，但是都需要auth。然后看下，auth从哪获取的，然后发现是扫码之后，通过接口拿到的。
然后分析了一下，也算知道了，扫码登录的一些实现方式。&lt;/p&gt;
&lt;h4 id=&quot;step-1&quot;&gt;step 1&lt;/h4&gt;
&lt;p&gt;通过一个接口获取唯一的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UUID&lt;/code&gt;，同时这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UUID&lt;/code&gt;也是有过期时间的。即刻好像是2分钟。&lt;/p&gt;
&lt;h4 id=&quot;step-2&quot;&gt;step 2&lt;/h4&gt;
&lt;p&gt;拿到这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UUID&lt;/code&gt;，再加上一些参数，生成一个二维码。在页面上展示。同时调用验证接口，传入生成的UUID。&lt;/p&gt;
&lt;h4 id=&quot;step-3&quot;&gt;step 3&lt;/h4&gt;
&lt;p&gt;拿出手机，用已经登录之后的app扫第二步生成的二维码。在手机上点确认。如果点了确认，第二步的验证接口会返回true。这时候，再调用另外一个confirm接口。&lt;/p&gt;
&lt;h4 id=&quot;step-4&quot;&gt;step 4&lt;/h4&gt;
&lt;p&gt;调用confirm接口，这时候，返回的数据就有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth&lt;/code&gt;的值了，这时候把auth的值保存在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localstorage&lt;/code&gt;里，就可以做成登录态了。
这个就是简单的，扫码登录的原理。
&lt;!--more--&gt;&lt;/p&gt;
&lt;h4 id=&quot;挖个坑&quot;&gt;挖个坑&lt;/h4&gt;
&lt;p&gt;不过原理很简单，但是实现起来，却不简单。具体的实现，可能会有一些意向不到的问题。虽然，调用即刻的扫码登录，已经成功，但是具体接口API内部怎么实现的，我还不知道，先挖个坑，以后有时间，自己写一个吧。&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Jul 2018 07:39:12 +0800</pubDate>
        <link>https://xqian.net//2018/07/30/%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/</link>
        <guid isPermaLink="true">https://xqian.net//2018/07/30/%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/</guid>
        
        
      </item>
    
      <item>
        <title>NPM Version 导致的一个Bug</title>
        <description>&lt;h3 id=&quot;起因&quot;&gt;起因&lt;/h3&gt;
&lt;p&gt;事情是这样的，一大早，测试小哥哥就说，新版的RN项目，怎么发布失败呀，你来解决一下。我打开打包日志，发现有一条错误的日志log。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;未找到项目依赖的React-Native&lt;/code&gt;
然后我就慢慢的debug，看看发现是哪里有依赖写的不对，导致的。debug了一上午。删掉本地的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_module&lt;/code&gt; 重新npm install 之后，发现有一个依赖包，始终安装不了。
提示的报错文案
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm ERR! Invalid version: &quot;2.10&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后突然看到2.10，npm version的格式不是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x.x.x&lt;/code&gt;这种么？我怎么会手抖写成了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.10&lt;/code&gt;呢，于是改成只正确的版本信息，提交之后，就可以打包了。
&lt;!-- more --&gt;&lt;/p&gt;
&lt;h3 id=&quot;思考&quot;&gt;思考&lt;/h3&gt;
&lt;p&gt;该用工具管理的时候，就用工具管理，比如这个version就应该用npm version工具自己管理自己，不要手抖自己去做change。
不要太相信自己的代码，出了问题，基本上是自己的问题，打包工具，有可能出现问题，但是，自己的代码，出现问题的概率更大。
工程化构建过程，还需要继续努力。&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jul 2018 07:27:47 +0800</pubDate>
        <link>https://xqian.net//2018/07/25/NPM-Version-%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%B8%AABug/</link>
        <guid isPermaLink="true">https://xqian.net//2018/07/25/NPM-Version-%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%B8%AABug/</guid>
        
        
      </item>
    
      <item>
        <title>redux 之 middleware </title>
        <description>&lt;p&gt;在回调中分发一个 action ，reducer 收到 action 后，更新 state 并通知 view 重新渲染。单向数据流，看着没什么问题，但是，如果需要打印每一个 action 信息来调试，就得去改 dispatch 或者 reducer 实现，使其具有打印日志的功能。又比如，点击 button 后，需要先去服务端请求数据，只有等数据返回后，才能重新渲染 view ，此时我们希望 dispatch 或者 reducer 拥有异步请求的功能。再比如，需要异步请求数据返回后，打印一条日志，再请求数据，再打印日志，再渲染。
&lt;!-- more --&gt;
面对多样的业务场景，单纯的修改 dispatch 或者 reducer 的代码显然不具有普适性么，我们需要的是可以组合的，自由拔插的插件机制，这一点 redux 借鉴了koa里的 middleware 的思想，另外 redux 中的 reducer 更关心的是数据的转化逻辑，所以 middleware 就是为了增强 dispatch 而出现的。
展示了应用middleware 后 redux 处理事件的逻辑，每一个 middleware 处理一个相对独立的业务需求，通过串联不同的middleware 实现变化多样的功能。&lt;/p&gt;

&lt;p&gt;currying 的middleware 结构的好处主要有以下两点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;易串联 currying 函数具有延迟执行的特性，通过不断currying 形成的middleware 可以 i累积参数，再配合 compose 的方式，很容易形成pipeline 来处理数据流。&lt;/li&gt;
  &lt;li&gt;共享store 在 appleMiddleware 执行的过程中，store 还是旧的，但是 因为闭包的存在，applyMiddleware 完成后，所有middleware 内部拿到的store 是最新且相同的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外，我们会发现，applyMiddleware 的结构也是一个多层currying 函数，借助compose applyMiddleware 可以用来和其他插件加强createStore 函数。&lt;/p&gt;

&lt;h2 id=&quot;给middleware-分发store&quot;&gt;给middleware 分发store&lt;/h2&gt;
&lt;p&gt;通过如下方式创建一个普通的 store 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let newstore = applyMiddleware(mid1, mid2,mid3,...)(createStore)(reducer, null)&lt;/code&gt;;
上述代码执行后，applymiddleware 方法陆续得到了3个参数，第一个是middlewares 数组，第二个是redux 原生的 createStore 最后一个是reducer 。然后，我们可以看到applyMiddleware 利用createStore 和 reducer 创建了一个store。 而store 的getState 方法和 dispatch 方法又分别被直接和间接的赋值给middlewareAPI变量store：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const middlewareAPI = {
	getState: store.getState,
	dispatch: (action)=&amp;gt; dispatch(action)
};
chain = middlewares.map(middleware =&amp;gt; middleware(middlewareAPI))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，让每个middleware 带着middleware API 这个参数分别执行一遍。执行完后，获得chain 数组，f1,f2,f3,…fx,…fn，它保存的对象是第二个箭头函数返回的匿名函数。因为是闭包，每个匿名函数可以访问相同的store， 即middleware API。&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Jun 2017 06:58:00 +0800</pubDate>
        <link>https://xqian.net//2017/06/05/redux-%E4%B9%8B-middleware/</link>
        <guid isPermaLink="true">https://xqian.net//2017/06/05/redux-%E4%B9%8B-middleware/</guid>
        
        <category>redux</category>
        
        <category>javascript</category>
        
        
      </item>
    
      <item>
        <title>初识redux</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;简书 &lt;a href=&quot;http://www.jianshu.com/u/1578eaace5b4&quot;&gt;i蒹葭从风&lt;/a&gt;
转载请注明原创出处，谢谢！
如果读完觉得有收获的话，欢迎点赞加关注&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单介绍一下redux 的一些术语和基本概念。 action，reducer，state，store。主要是这4个术语。下面依次来说说这些概念。&lt;/p&gt;

&lt;h2 id=&quot;action&quot;&gt;action&lt;/h2&gt;
&lt;p&gt;action 本质上是javascript 的普通对象。约定action内使用一个字符串类型的type字段来表示将要执行的动作。很多情况下，type将会定义成字符串常量。例如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const INCREMENT = 'INCREMENT'&lt;/code&gt;，另外，当应用项目很大的时候，建议使用单独的模块或文件来存放action。除了type字段以外，action 对象的结构完全有开发者自己决定。&lt;/p&gt;
&lt;h2 id=&quot;reducer&quot;&gt;reducer&lt;/h2&gt;
&lt;p&gt;reducer 是个形式为(state, action) =&amp;gt; state 的纯函数 ，描述了action 如何把state 转变成下一个state。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Reducer  这个名称来源于Array.prototype.reduce中的第一个参数，reducer 。reducer 是一个累加器函数，它的参数是上个累加值和数组当前元素，然后通过计算返回本次的累加值。在redux中，state 就是那个累加值，action 就是数组当前的元素。reduce 以及map filter 等方法是函数式编程中十分常用的数组处理方法。
&lt;!-- more --&gt;
state 的形式取决于开发者项目的需要，可是是基本类型，数组，是对象，甚至是immutable.js 生成的数据结构。唯一的点是当state 变化时需要返回全新的对象，而不是修改传入的参数。reducer 要用纯函数。那么什么是纯函数。&lt;/p&gt;
  &lt;h3 id=&quot;纯函数&quot;&gt;纯函数&lt;/h3&gt;
  &lt;p&gt;纯函数 pure function 是这样一种函数，输入输出数据流全是显式的，显式的意思是，函数与外界交换数据只有一个唯一的渠道，参数和返回值。函数从函数外部接受的所有输入信息都通过参数传递到该函数内部；函数输出到函数外部的所有信息都通过函数返回值传递到该函数外部。
纯函数不能访问外部变量，它能接触的外部参数只有来自外部的参数。纯函数不能修改参数，因为这样做可能会把一些信息通过输入参数夹带到外界。
reducer 就是这样的纯函数，永远不要在reducer 里做一下操作：&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;修改传入的参数&lt;/li&gt;
    &lt;li&gt;执行有副作用的操作，比如：请求API和路由跳转&lt;/li&gt;
    &lt;li&gt;调用非纯函数，如 new Data.now(),Math.random()&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;函数副作用会给应用带来不可预测的麻烦，产生难以预测的效果。严格的函数式语言要求函数必须无副作用。&lt;/p&gt;
&lt;h3 id=&quot;不能修改参数-state&quot;&gt;不能修改参数 state&lt;/h3&gt;
&lt;p&gt;当state 是对象时，修改参数state会影响程序的变更追踪。如果你在项目里使用了react-redux 将redux 程序连接上了UI 组件上，那么你的组件将不能更新，因为react-redux 无法察觉到任何state变化。为什么会发生这样的事情？因为在javascript 上，对象是引用类型，当你改变了参数state 变化前后的state 将会指向同一个内存地址，react-redux 就会以为这是两个相同的state，而不会进行渲染。&lt;/p&gt;
&lt;h2 id=&quot;store&quot;&gt;store&lt;/h2&gt;
&lt;p&gt;store 是个全局对象，将action 和reducer 以及state 联系在一起。Store 有一下职能：
维持应用的state
提供getState 方法获取state
提供dispatch 方法更新state
通过subscribe (listener)注册监听器&lt;/p&gt;

&lt;p&gt;创建store需要从redux 包中导入createStore 这个方法。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import  {createStore} from 'redux'&lt;/code&gt; 
使用reducer 纯函数作为第一个参数创建store
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let store = createStore(reducer)&lt;/code&gt;
还可以添加第二个参数，作为初始化state&lt;/p&gt;
&lt;h3 id=&quot;获取和监听&quot;&gt;获取和监听&lt;/h3&gt;
&lt;p&gt;创建完store 使用它获取数据，并监听变化&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const store = createStore(reducer);
let currentValue = store.getState();
store.subscribe(()=&amp;gt;{
    const previousValue = currentValue;
    currentValue = store.getState();
    console.log(previousValue, currentValue)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;以上代码做了这样几件事：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;获取初始化state和currentValue&lt;/li&gt;
  &lt;li&gt;使用store.subscribe()方法监听变化&lt;/li&gt;
  &lt;li&gt;在store.subscribe的回调函数中，将currentValue 传递给previousValue 作为先前的state&lt;/li&gt;
  &lt;li&gt;获取更新后的state 到curentValue 作为当前的state&lt;/li&gt;
  &lt;li&gt;打印变化前后的state&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;发起action&quot;&gt;发起action&lt;/h2&gt;
&lt;p&gt;Store 使用dispatch(action)方法发起action，更新state
当发起action后，就将action 穿进了store中，使用reducer 纯函数继续执行更新。改变内部state 唯一方法是dispatch 一个action。这样确保了视图和网络请求都不能直接修改state，相反它们只能表达想要修改state的意图，也就是dispatch 一个action。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;action 是个javascript 对象，包含一个type 字段的javascript 对象，它是store 数据的唯一来源。&lt;/li&gt;
  &lt;li&gt;reducer 是一个纯函数，不要在reducer 中做这些事情，修改传入参数state，执行有副作用的操作，调用非穿函数&lt;/li&gt;
  &lt;li&gt;store 负责更新，查询，订阅state 等多个工作。store 是全局唯一的，它将action，reducer，state联系在一起。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 07 May 2017 00:10:06 +0800</pubDate>
        <link>https://xqian.net//2017/05/07/%E5%88%9D%E8%AF%86redux/</link>
        <guid isPermaLink="true">https://xqian.net//2017/05/07/%E5%88%9D%E8%AF%86redux/</guid>
        
        
      </item>
    
      <item>
        <title>微信小程序系列「一」</title>
        <description>&lt;p&gt;2016年9月21日，在前端届的确是一个值得纪念的日子。这天，微信放出杀手锏，WeChatApp 又称微信小程序。但是就目前来看，有诸多不便，但是这个事情，依然有很大的意义。因为这是一个生态。从放出来这个消息，就开始关注。加上公司也有内测资格，所以准备写一些文章来聊聊weChatApp开发的一些情况，以及踩到的坑。
&lt;!--more--&gt;
首先提到的便是1M的大小限制🚫，其实这个看到1M的大小，觉得没什么，但是作为一个大的公司，那么多业务，总共就1M，那么就比较可怜了。算起来我们BU获得的大小容量就100Kb，100Kb是什么概念，纯代码大概只有3000行左右的代码。但是我们之前的代码压缩之后也有235kb呢。反正容量是一个限制。
其次：很多官方推荐的API也是不能用的。比如ES6，虽然后来开发工具支持了ES6，但是一些android 机是不支持ES6的，也是呵呵哒。还有官方推荐flex布局，但是在iOS 8及其以下是不支持flex布局的，那怎么办呢？官方给的解释是，自己去做兼容。
官方很容易改变API，很多官方组件还没上线呢，就已经废弃了。比如一下的截图：
&lt;img src=&quot;https://raw.githubusercontent.com/iu2fish/_posts/master/media/14779317322951.jpg&quot; alt=&quot;&quot; /&gt;
这个就比较尴尬了。很多在内测的公司，估计第一版就是按着官方的组件来的，结果还没上架，你就把官方的组件给废弃了，这是拿内测公司当小白鼠呢。但是，就算是当小白鼠，很多公司还是跪舔着争当小白鼠。
下面来说说开发中遇到的坑&lt;/p&gt;
&lt;h5 id=&quot;setdata-以数据来驱动view&quot;&gt;setData 以数据来驱动view&lt;/h5&gt;
&lt;p&gt;在第一版的API中，setData是可以在onLoad的时候，设置数据的，但是更新一次api之后，在onload就不能设置setData了，但是官方的文档，并没有提到这个。还有在setData的时候，如果数据，有多层级。当数据有改变的时候，必须从外层开始设置，例如&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;obj:{
    innerObj:{}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果在setData的时候写法这样的话，是无效的。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.setData({
	innerObj:innerObj
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样是无效的。
还有在上面提到，在onload 的时候设置setData无效，那怎么办呢，就像我们的项目，必须设置的话，只能采取官方不推荐或者说，比较猥琐的解决方案。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.data.obj = obj;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;虽然官方不推荐，但是也没办法不是吗
setData在内部的一个队列方案，这个以后会详细的说，这一篇主要是说说小程序有哪些坑。现在有解决方案的，就把解决方案说一下，没有的话，就是吐槽吧。&lt;/p&gt;
&lt;h4 id=&quot;数据存储&quot;&gt;数据存储&lt;/h4&gt;
&lt;p&gt;每个微信小程序都可以有自己的本地缓存，可以通过 wx.setStorage（wx.setStorageSync）、wx.getStorage（wx.getStorageSync）、wx.clearStorage（wx.clearStorageSync）可以对本地缓存进行设置、获取和清理。本地缓存最大为10MB。
在第一版的api中，删除storage是不能指定key进行删除的。那么怎么删除指定的storage呢，只有把当前的key的value值设置为空了。&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;wx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个确实也够猥琐的，不过后来的更新中，微信提供了，指定key的删除方法。&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;wx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OBJECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iu2fish/_posts/master/media/14780057339213.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也提供了，同步删除的方法。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wx.removeStorageSync(KEY)&lt;/code&gt;
用法
&lt;img src=&quot;https://raw.githubusercontent.com/iu2fish/_posts/master/media/14780058000923.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;request请求并发限制&quot;&gt;request请求并发限制&lt;/h4&gt;
&lt;p&gt;微信为了保证安全，在同时request请求的时候，做了限制，也就是同时并发5个请求，这个暂时无解。只能自己去封装队列来处理请求。
request没有cancel的事件，只要这个请求发出去了，是不能取消的。&lt;/p&gt;
&lt;h4 id=&quot;5层url跳转&quot;&gt;5层url跳转&lt;/h4&gt;
&lt;p&gt;微信也是为了安全考虑，限制了，页面跳转的限制，如果层级大于5个的话，不报错，页面就是白页，官方提供的wx.redirectTo去处理，而不是wx.navigateTo。&lt;/p&gt;
&lt;h4 id=&quot;view的布局以及wxss&quot;&gt;view的布局以及wxss&lt;/h4&gt;
&lt;p&gt;官方推荐flex布局，但是当使用form表单的时候，form表单支持flex的并不是很好，使用的时候，要注意。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action-sheet&lt;/code&gt; 这个东西，很适合做下面的筛选项，但是这个适合少量的数据，因为不能滚动而且自带的样式也是不好控制。呵呵哒。不过也被官方判了死刑，还未上线就被废弃。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modal lodding toast&lt;/code&gt;，这3个组件已经被官方判了死刑了，还没上线就被废弃。&lt;/p&gt;
&lt;h4 id=&quot;wxss的一些限制&quot;&gt;wxss的一些限制&lt;/h4&gt;
&lt;p&gt;第一版的时候，wxss不支持层级选择，后来更新的时候，官方把这句话给删除了，也不知道是推荐使用层级还是不支持，反正就是把不支持层级选择给删除了。官方的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changelist&lt;/code&gt;也没提到这块。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iconfont&lt;/code&gt;能不能使用？可以，但是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ios&lt;/code&gt;下有兼容性，如果使用在线的iconfont的话，ios不支持，所以为了包的容量，只能&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt;在本地了。&lt;/p&gt;

&lt;h4 id=&quot;另外一些别的坑如业务交互&quot;&gt;另外一些别的坑，如业务交互&lt;/h4&gt;
&lt;p&gt;这块等下一篇再详细介绍&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Oct 2016 08:48:45 +0800</pubDate>
        <link>https://xqian.net//2016/10/27/we-chat-app-pages-1/</link>
        <guid isPermaLink="true">https://xqian.net//2016/10/27/we-chat-app-pages-1/</guid>
        
        <category>WeChatApp</category>
        
        <category>javascript</category>
        
        <category>react</category>
        
        
      </item>
    
  </channel>
</rss>
